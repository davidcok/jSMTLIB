success
success
success
(assert (forall ((r Bool)) (! r :named R))) ; error
                              ^
(error "The expression being named is not closed - this symbol is a variable: r")
(assert (exists ((r Bool)) (! r :named R))) ; error
                              ^
(error "The expression being named is not closed - this symbol is a variable: r")
(assert (forall ((r Bool)) (and r (! q :named R)))) ; OK
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
(error "*** Fatal exception:
Parse Error: A quantified variable may not be of type BOOLEAN
stdin:4: this is the location of the error
")
(assert (let ((r true)) (! r :named R))) ; error - R already defined
                                    ^
(error "Symbol R is already defined")
(assert (let ((r true)) (! r :named R2))) ; OK
                        ^^^^^^^^^^^^^^^
(error "Failed to define attributed expression: java.io.IOException: The pipe is being closed")
(assert (forall ((r Bool)) (let ((r true)) (! r :named RR)))) ; OK
                                           ^^^^^^^^^^^^^^^
(error "Failed to define attributed expression: java.io.IOException: The pipe is being closed")
(assert (forall ((q Bool)) (let ((r q)) (! r :named RRR)))) ; error - FIXME
                                        ^^^^^^^^^^^^^^^^
(error "Failed to define attributed expression: java.io.IOException: The pipe is being closed")
